{% extends 'base.html.twig' %}
{% block body %}
<!-- Page Header -->
    <!-- Set your background image for this header on the line below. -->
       <header class="intro-header" style="background-image: url({{asset('img/sfCommand.jpg')}})">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                    <div class="post-heading">
                        <h1>Comandos de consola en Symfony</h1>
                        <p>&nbsp;</p>
                        <p>&nbsp;</p>
                        <p>&nbsp;</p>
                        
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Post Content -->
    <article>
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                    <p>En FOSUserBundle utilizan comandos en consola para crear usuarios, eliminar usuarios, promover roles, etc. Así que pense que podía hacer mis propios comando de consola para crear entidades. No es muy complicado, Symfony es una maravilla que permite hacer de todo.</p>
                    
                    <p>A continuación se muestra la configuración para hacer un comando.</p>
                    <pre><code class="language-php line-numbers">
protected function configure()
    {
        $this
            ->setName('curso:create')
            ->setDescription('Create a user.')
            ->setDefinition(array(
                new InputArgument('nombre', InputArgument::REQUIRED, 'Nombre curso'),
                new InputArgument('codigo', InputArgument::REQUIRED, 'Código curso'),
            ))
            
        ;
    }
             </code></pre>
                    <p>En la documentación de Syfmony se pueden encontrar diferentes parámetros a colocar en los input. Se pueden colocar otros parámetros opcionales con la siguiente sintaxis: --parámetroOpcional</p>
                    
                    <p>Ahora para que la consola sea interactiva y pida los datos que necesita, se realiza lo siguiente.</p>
                   <pre><code class="language-php line-numbers">
 protected function interact(InputInterface $input, OutputInterface $output)
    {
        if (!$input->getArgument('nombre')) {
            $nombre = $this->getHelper('dialog')->askAndValidate(
                $output,
                'Ingrese nombre del curso:',
                function($nombre) {
                    if (empty($nombre)) {
                        throw new \Exception('El nombre no puede estar vacío');
                    }

                    return $nombre;
                }
            );
            $input->setArgument('nombre', $nombre);
        }
        if (!$input->getArgument('codigo')) {
            $codigo = $this->getHelper('dialog')->askAndValidate(
                $output,
                'Ingrese el código del curso:',
                function($codigo) {
                    if (empty($codigo)) {
                        throw new \Exception('El código no puede estar vacío');
                    }

                    return $codigo;
                }
            );
            $input->setArgument('codigo', $codigo);
        }
    }

                   </pre></code>

                   <p>En el código anterior se pide de forma interactiva el nombre del curos y el código del curso.</p>
                   <p>Ahora para guardarlo, solo falta verificar que las entradas no sean nulas y llamar a EntityManager para guardar le entidad creada.</p>
                    
                    <pre><code class="language-php line-numbers">

 protected function execute(InputInterface $input, OutputInterface $output)
    {
        $nombre = $input->getArgument('nombre');
        $codigo = $input->getArgument('codigo');
        $text = '';
        if ($nombre && $codigo) {
            $curso = new Curso();
            $curso->setNombreCurso($nombre);
            $curso->setCodigoCurso($codigo);
            $em = $this->getContainer()->get('doctrine.orm.entity_manager');
            $em->persist($curso);
            $em->flush();
            $text = 'Curso '.$nombre.' creado exitosamente';

           
        } else {
            $text = 'Error al crear el curso'.$nombre.$codigo;
        }

      

        $output->writeln($text);
    }
            </pre></code>

            <p>Al final la clase completa queda así.</p>
            <pre><code class = "language-php line-numbers">
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use CursoBundle\Entity\Curso;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputDefinition;


class CreateCursoCommand extends ContainerAwareCommand
{
    protected function configure()
    {
        $this
            ->setName('curso:create')
            ->setDescription('Create a user.')
            ->setDefinition(array(
                new InputArgument('nombre', InputArgument::REQUIRED, 'Nombre curso'),
                new InputArgument('codigo', InputArgument::REQUIRED, 'Código curso'),
            ))
            
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $nombre = $input->getArgument('nombre');
        $codigo = $input->getArgument('codigo');
        $text = '';
        if ($nombre && $codigo) {
            $curso = new Curso();
            $curso->setNombreCurso($nombre);
            $curso->setCodigoCurso($codigo);
            $em = $this->getContainer()->get('doctrine.orm.entity_manager');
            $em->persist($curso);
            $em->flush();
            $text = 'Curso '.$nombre.' creado exitosamente';

           
        } else {
            $text = 'Error al crear el curso'.$nombre.$codigo;
        }

      

        $output->writeln($text);
    }

    protected function interact(InputInterface $input, OutputInterface $output)
    {
        if (!$input->getArgument('nombre')) {
            $nombre = $this->getHelper('dialog')->askAndValidate(
                $output,
                'Ingrese nombre del curso:',
                function($nombre) {
                    if (empty($nombre)) {
                        throw new \Exception('El nombre no puede estar vacío');
                    }

                    return $nombre;
                }
            );
            $input->setArgument('nombre', $nombre);
        }
        if (!$input->getArgument('codigo')) {
            $codigo = $this->getHelper('dialog')->askAndValidate(
                $output,
                'Ingrese el código del curso:',
                function($codigo) {
                    if (empty($codigo)) {
                        throw new \Exception('El código no puede estar vacío');
                    }

                    return $codigo;
                }
            );
            $input->setArgument('codigo', $codigo);
        }
    }

    
}
            </code></pre>


                    
                    
                   
                </div>
            </div>
        </div>
    </article>

    <hr>
{% include 'default/footer.html.twig' %}
{% endblock body %}